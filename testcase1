##TESTCASE1-INPUT

{
    "keys": {
        "n": 4,
        "k": 3
    },
    "1": {
        "base": "10",
        "value": "4"
    },
    "2": {
        "base": "2",
        "value": "111"
    },
    "3": {
        "base": "10",
        "value": "12"
    },
    "6": {
        "base": "4",
        "value": "213"
    }
}

##TESTCASE2-INPUT

{
    "keys": {
        "n": 9,
        "k": 6
    },
    "1": {
        "base": "10",
        "value": "28735619723837"
    },
    "2": {
        "base": "16",
        "value": "1A228867F0CA"
    },
    "3": {
        "base": "12",
        "value": "32811A4AA0B7B"
    },
    "4": {
        "base": "11",
        "value": "917978721331A"
    },
    "5": {
        "base": "16",
        "value": "1A22886782E1"
    },
    "6": {
        "base": "10",
        "value": "28735619654702"
    },
    "7": {
        "base": "14",
        "value": "71AB5070CC4B"
    },
    "8": {
        "base": "9",
        "value": "122662581541670"
    },
    "9": {
        "base": "8",
        "value": "642121030037605"
    }
}


##CODE 1:

import org.json.JSONObject;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.IOException;

public class ShamirSecretSharing {
    public static void main(String[] args) {
        try {
            // Load the JSON file from src folder
            String content = new String(Files.readAllBytes(Paths.get("src/testcase1.json")));

            // Parse the JSON content
            JSONObject jsonObject = new JSONObject(content);

            // Extract keys for n and k
            JSONObject keys = jsonObject.getJSONObject("keys");
            int n = keys.getInt("n");
            int k = keys.getInt("k");

            System.out.println("Number of roots (n): " + n);
            System.out.println("Minimum number of roots required (k): " + k);

            // Loop through and extract the base and value from each point
            for (int i = 1; i <= n; i++) {
                if (jsonObject.has(String.valueOf(i))) {
                    JSONObject point = jsonObject.getJSONObject(String.valueOf(i));
                    int base = Integer.parseInt(point.getString("base"));
                    String value = point.getString("value");

                    // Decode the value based on the provided base
                    int decodedValue = Integer.parseInt(value, base);
                    System.out.println("Point " + i + ": Base " + base + ", Value " + value + " (decoded to " + decodedValue + ")");
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


